import os

from vkbottle.keyboard import Keyboard
from vkbottle.keyboard import Text

from database import Database
from database import utils


class Keyboards:
    def __init__(self):
        self.db = Database(os.environ["DATABASE_URL"])

    @staticmethod
    async def main_menu(user_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

        """
        is_admin = await utils.is_admin(user_id=user_id)
        kb = Keyboard()
        if is_admin:
            kb.add_row()
            kb.add_button(Text(label="üì¢ –ü—Ä–∏–∑—ã–≤", payload={"button": "call"}))
            kb.add_button(Text(label="üí∞ –§–∏–Ω–∞–Ω—Å—ã", payload={"button": "finances"}))
        kb.add_row()
        kb.add_button(Text(label="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", payload={"button": "schedule"}))
        kb.add_button(Text(label="üì® –†–∞—Å—Å—ã–ª–∫–∏", payload={"button": "mailings"}))
        if is_admin:
            kb.add_row()
            kb.add_button(Text(label="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", payload={"button": "settings"}))
            kb.add_button(Text(label="üåê –í–µ–±", payload={"button": "web"}))
        return kb.generate()

    @staticmethod
    def skip_call_message():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–∞
        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        kb = Keyboard()
        kb.add_row()
        kb.add_button(
            Text(label="üëâüèª –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", payload={"button": "skip_call_message"})
        )
        kb.add_button(Text(label="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"}))
        return kb.generate()

    async def alphabet(self, user_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ —Ñ–∞–º–∏–ª–∏–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Returns:
            Keyboard: –§—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        kb = Keyboard()
        kb.add_row()
        alphabet = await self.db.get_unique_second_name_letters(user_id)
        for letter in alphabet:
            if len(kb.buttons[-1]) == 4:
                kb.add_row()
            kb.add_button(
                Text(label=letter, payload={"button": "letter", "value": letter})
            )
        return kb

    async def call_interface(self, user_id: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑—ã–≤–∞–µ–º—ã—Ö

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        kb = await self.alphabet(user_id)
        if len(kb.buttons[-1]):
            kb.add_row()
        kb.add_button(Text(label="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", payload={"button": "save_selected"}))
        kb.add_button(Text(label="üë• –ü—Ä–∏–∑–≤–∞—Ç—å –≤—Å–µ—Ö", payload={"button": "call_all"}))
        kb.add_row()
        kb.add_button(Text(label="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"}))

        return kb.generate()

    async def list_of_students(self, letter: str, user_id: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ñ–∞–º–∏–ª–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ letter
        Args:
            letter: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–π
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        data = await self.db.get_list_of_names(letter, user_id)
        kb = Keyboard()
        kb.add_row()
        for item in data:
            print(item)
            if len(kb.buttons[-1]) == 2:
                kb.add_row()
            kb.add_button(
                Text(
                    label=f"{item['second_name']} {item['first_name']}",
                    payload={
                        "button": "student",
                        "student_id": item["id"],
                        "name": f"{item['second_name']} {item['first_name']}",
                    },
                )
            )
        if kb.buttons[-1]:
            kb.add_row()
        kb.add_button(Text(label="–ù–∞–∑–∞–¥", payload={"button": "skip_call_message"}))
        return kb.generate()

    @staticmethod
    def prompt():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        Returns:
            Keyboard: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        kb = Keyboard()
        kb.add_row()
        kb.add_button(Text(label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", payload={"button": "confirm"}))
        kb.add_button(Text(label="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", payload={"button": "deny"}))
        return kb

    def call_prompt(self, names_usage: bool, chat_type: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑—ã–≤–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –µ–≥–æ
        –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        Args:
            names_usage: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω
            chat_type: –¢–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞

        Returns:
            JSON-like str:  –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        kb = self.prompt()
        kb.add_row()
        if names_usage:
            names_emoji = "‚úÖ"
        else:
            names_emoji = "üö´"
        if chat_type:
            chat_emoji = "üì°"
        else:
            chat_emoji = "üõ†"
        kb.add_button(
            Text(
                label=f"{names_emoji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞",
                payload={"button": "names_usage"},
            )
        )
        kb.add_button(
            Text(
                label=f"{chat_emoji} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–µ—Å–µ–¥—É",
                payload={"button": "chat_config"},
            )
        )
        return kb.generate()

    @staticmethod
    def settings():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫

        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        kb = Keyboard()
        kb.add_row()
        kb.add_button(Text(label="üí¨ –ß–∞—Ç—ã", payload={"button": "chat_settings"}))
        kb.add_button(
            Text(label="–õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", payload={"button": "local_settings"})
        )
        kb.add_row()
        kb.add_button(Text(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "home"}))
        return kb.generate()
