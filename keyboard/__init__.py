import os

from vkbottle.keyboard import Keyboard
from vkbottle.keyboard import Text

from database import Database


class Keyboards:
    def __init__(self):
        self.db = Database(os.environ["DATABASE_URL"])

    async def main_menu(self, user_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

        """
        is_admin = await self.db.get_ownership_of_admin(user_id)
        kb = Keyboard()
        if is_admin:
            kb.add_row()
            kb.add_button(Text(label="üì¢ –ü—Ä–∏–∑—ã–≤", payload={"button": "call"}))
            kb.add_button(Text(label="üí∞ –§–∏–Ω–∞–Ω—Å—ã", payload={"button": "finances"}))
        kb.add_row()
        kb.add_button(Text(label="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", payload={"button": "schedule"}))
        kb.add_button(Text(label="üì® –†–∞—Å—Å—ã–ª–∫–∏", payload={"button": "mailings"}))
        if is_admin:
            kb.add_row()
            kb.add_button(Text(label="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", payload={"button": "settings"}))
            kb.add_button(Text(label="üåê –í–µ–±", payload={"button": "web"}))
        return kb.generate()

    @staticmethod
    def skip_call_message():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–∞
        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        kb = Keyboard()
        kb.add_row()
        kb.add_button(
            Text(label="üëâüèª –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", payload={"button": "skip_call_message"})
        )
        kb.add_button(Text(label="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"}))
        return kb.generate()

    async def alphabet(self, user_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ —Ñ–∞–º–∏–ª–∏–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Returns:
            Keyboard: –§—Ä–∞–≥–º–µ–Ω—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        kb = Keyboard()
        kb.add_row()
        alphabet = await self.db.get_unique_second_name_letters(user_id)
        for letter in alphabet:
            if len(kb.buttons[-1]) == 4:
                kb.add_row()
            kb.add_button(
                Text(label=letter, payload={"button": "letter", "value": letter})
            )
        return kb

    async def call_interface(self, user_id: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑—ã–≤–∞–µ–º—ã—Ö

        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        kb = await self.alphabet(user_id)
        if len(kb.buttons[-1]):
            kb.add_row()
        kb.add_button(Text(label="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", payload={"button": "save_selected"}))
        kb.add_button(Text(label="üë• –ü—Ä–∏–∑–≤–∞—Ç—å –≤—Å–µ—Ö", payload={"button": "call_all"}))
        kb.add_row()
        kb.add_button(Text(label="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"}))

        return kb.generate()

    async def list_of_students(self, letter: str, user_id: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ñ–∞–º–∏–ª–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ letter
        Args:
            letter: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–π
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        data = await self.db.get_list_of_names(letter, user_id)
        kb = Keyboard()
        kb.add_row()
        for item in data:
            if len(kb.buttons[-1]) == 2:
                kb.add_row()
            kb.add_button(
                Text(
                    label=f"{item['second_name']} {item['first_name']}",
                    payload={
                        "button": "student",
                        "student_id": item["id"],
                        "name": f"{item['second_name']} {item['first_name']}",
                    },
                )
            )
        if kb.buttons[-1]:
            kb.add_row()
        kb.add_button(Text(label="–ù–∞–∑–∞–¥", payload={"button": "skip_call_message"}))
        return kb.generate()

    @staticmethod
    def prompt():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        Returns:
            Keyboard: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        kb = Keyboard()
        kb.add_row()
        kb.add_button(Text(label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", payload={"button": "confirm"}))
        kb.add_button(Text(label="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", payload={"button": "deny"}))
        return kb

    def call_prompt(self, names_usage: bool, chat_type: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑—ã–≤–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –µ–≥–æ
        –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        Args:
            names_usage: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω
            chat_type: –¢–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞

        Returns:
            JSON-like str:  –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        kb = self.prompt()
        kb.add_row()
        if names_usage:
            names_emoji = "‚úÖ"
        else:
            names_emoji = "üö´"
        if chat_type:
            chat_emoji = "üì°"
        else:
            chat_emoji = "üõ†"
        kb.add_button(
            Text(
                label=f"{names_emoji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞",
                payload={"button": "names_usage"},
            )
        )
        kb.add_button(
            Text(
                label=f"{chat_emoji} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–µ—Å–µ–¥—É",
                payload={"button": "chat_config"},
            )
        )
        return kb.generate()

    @staticmethod
    def settings():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫

        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        kb = Keyboard()
        kb.add_row()
        kb.add_button(
            Text(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", payload={"button": "admin_settings"})
        )
        kb.add_row()
        kb.add_button(
            Text(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã", payload={"button": "group_settings"})
        )
        kb.add_row()
        kb.add_button(Text(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "home"}))
        return kb.generate()

    @staticmethod
    def admin_settings(names_usage: bool, chat_type: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–≤—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Args:
            names_usage: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_type: –¢–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        Returns:
            JSON-like str: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        kb = Keyboard()
        kb.add_row()
        if names_usage:
            names_emoji = "‚úÖ"
        else:
            names_emoji = "üö´"
        if chat_type:
            chat_emoji = "üì°"
        else:
            chat_emoji = "üõ†"
        kb.add_button(
            Text(
                label=f"{names_emoji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞",
                payload={"button": "names_usage"},
            )
        )
        kb.add_button(
            Text(
                label=f"{chat_emoji} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±–µ—Å–µ–¥—É",
                payload={"button": "chat_config"},
            )
        )
        kb.add_row()
        kb.add_button(Text(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "settings"}))
        return kb.generate()

    async def group_settings(self, user_id):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤

        Returns:
            JSON-like str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        chats = await self.db.get_list_of_chats(user_id)
        kb = Keyboard()
        kb.add_row()
        for chat in chats:
            if len(kb.buttons[-1]) == 2:
                kb.add_row()
            if chat["chat_type"]:
                kb.add_button(
                    Text(
                        label="–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç",
                        payload={
                            "button": "configure_chat",
                            "group_id": chat["group_id"],
                            "chat_type": chat["chat_type"],
                            "chat_id": chat["chat_id"],
                            "active": chat["active"],
                        },
                    )
                )
            else:
                kb.add_button(
                    Text(
                        label="–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç",
                        payload={
                            "button": "configure_chat",
                            "group_id": chat["group_id"],
                            "chat_type": chat["chat_type"],
                            "chat_id": chat["chat_id"],
                            "active": chat["active"],
                        },
                    )
                )
        if (
            len(chats) < await self.db.get_chat_types()
            and await self.db.get_cached_chats()
        ):
            if kb.buttons[-1]:
                kb.add_row()
            kb.add_button(
                Text(label="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", payload={"button": "register_chat"})
            )
        kb.add_row()
        kb.add_button(Text(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "settings"}))

        return kb.generate()

    @staticmethod
    async def configure_chat(
        group_id: int, chat_id: int, chat_type: int, active: int, **_
    ):
        """
        –ì–µ–Ω–µ—Ä–∏—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤
        Args:
            group_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            chat_type: –¢–∏–ø —á–∞—Ç–∞
            active: –í—ã–±—Ä–∞–Ω –ª–∏ —á–∞—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫?

        Returns:
            JSON-like str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """

        kb = Keyboard()
        kb.add_row()
        if not active:
            kb.add_button(
                Text(
                    label="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç",
                    payload={
                        "button": "activate_chat",
                        "group_id": group_id,
                        "chat_type": chat_type,
                        "chat_id": chat_id,
                        "active": active,
                    },
                )
            )
        kb.add_button(
            Text(
                label="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç",
                payload={
                    "button": "delete_chat",
                    "group_id": group_id,
                    "chat_type": chat_type,
                    "chat_id": chat_id,
                    "active": active,
                },
            )
        )
        kb.add_row()
        kb.add_button(Text(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "group_settings"}))
        return kb.generate()

    async def free_chats(self, bot):
        """
        –°–ø–∏—Å–æ–∫, —á–∞—Ç–æ–≤, —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API

        Returns:
            JSON-like str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        kb = Keyboard()
        kb.add_row()
        cached_chats = await self.db.get_cached_chats()
        for chat in cached_chats:
            if len(kb.buttons[-1]) == 2:
                kb.add_row()
            chat_info = await bot.api.messages.get_conversations_by_id(
                group_id=bot.group_id, peer_ids=chat["chat_id"]
            )
            if info := chat_info.items:
                title = info[0].chat_settings.title
            else:
                title = "???"
            kb.add_button(
                Text(
                    label=title,
                    payload={
                        "button": "add_chat",
                        "chat_id": chat["chat_id"],
                        "title": title,
                    },
                )
            )
        if kb.buttons[-1]:
            kb.add_row()
        kb.add_button(Text(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "group_settings"}))

        return kb.generate()

    async def free_types_of_chats(self, user_id: int, chat_id: int):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —á–∞—Ç–∞

        Returns:
            JSON-like str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        kb = Keyboard()
        kb.add_row()
        if not await self.db.is_chat_registered(user_id, 0):
            kb.add_button(
                Text(
                    label="–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç",
                    payload={
                        "button": "bind_chat",
                        "chat_id": chat_id,
                        "chat_type": 0,
                    },
                )
            )
        if not await self.db.is_chat_registered(user_id, 1):
            kb.add_button(
                Text(
                    label="–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç",
                    payload={
                        "button": "bind_chat",
                        "chat_id": chat_id,
                        "chat_type": 1,
                    },
                )
            )

        if kb.buttons[-1]:
            kb.add_row()
        kb.add_button(Text(label="üëàüèª –ù–∞–∑–∞–¥", payload={"button": "group_settings"}))

        return kb.generate()
