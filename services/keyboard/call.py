from vkwave.bots import Keyboard

from database import utils as db
from services import keyboard as kbs

JSONStr = str


def skip_call_message() -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–∞
    Returns:
        JSONStr: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    kb = Keyboard()
    kb.add_text_button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", payload={"button": "skip_call_message"})

    kb.add_text_button(text="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"})
    return kb.get_keyboard()


def call_interface(user_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑—ã–≤–∞–µ–º—ã—Ö

    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        JSONStr: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    kb = kbs.common.alphabet(user_id)
    if len(kb.buttons[-1]):
        kb.add_row()
    kb.add_text_button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", payload={"button": "save_selected"})
    kb.add_text_button(text="üë• –ü—Ä–∏–∑–≤–∞—Ç—å –≤—Å–µ—Ö", payload={"button": "call_all"})
    kb.add_row()
    kb.add_text_button(text="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"})

    return kb.get_keyboard()


def list_of_students(letter: str, user_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ñ–∞–º–∏–ª–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ letter
    Args:
        letter: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–π
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        JSONStr: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    data = db.students.get_list_of_students_by_letter(letter, user_id)
    selected = db.shortcuts.get_list_of_calling_students(
        db.students.get_system_id_of_student(user_id)
    )
    kb = Keyboard()
    for item in data:
        if len(kb.buttons[-1]) == 2:
            kb.add_row()
        label = " "
        if item.id in selected:
            label = "‚úÖ "
        kb.add_text_button(
            text=f"{label}{item.second_name} {item.first_name}",
            payload={
                "button": "student",
                "student_id": item.id,
                "letter": letter,
                "name": f"{item.second_name} {item.first_name}",
            },
        )
    if kb.buttons[-1]:
        kb.add_row()
    kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "skip_call_message"})
    return kb.get_keyboard()


def call_prompt(admin_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∑—ã–≤–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –µ–≥–æ
    –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    Args:
        admin_id: –∏–¥–µ–Ω—Ç—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Returns:
        JSONStr:  –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = kbs.common.prompt()
    kb.add_row()
    store = db.admin.get_admin_storage(admin_id)
    if store.names_usage:
        names_emoji = "‚úÖ"
    else:
        names_emoji = "üö´"
    if store.current_chat.id:
        chat_emoji = "üì°"
    else:
        chat_emoji = "üõ†"
    kb.add_text_button(
        text=f"{names_emoji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞", payload={"button": "names_usage"},
    )
    kb.add_text_button(
        text=f"{chat_emoji} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —á–∞—Ç", payload={"button": "chat_config"},
    )
    return kb.get_keyboard()
