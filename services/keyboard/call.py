from vkwave.bots import Keyboard

from database import utils as db
from services import keyboard as kbs
from services.keyboard.common import Keyboards
from services.keyboard.common import StudentsNavigator

JSONStr = str


class CallKeyboards(Keyboards):
    """–ù–∞–±–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –ü—Ä–∏–∑—ã–≤–∞."""

    def __init__(self, admin_id: int, return_to: str):
        super().__init__(admin_id)
        self.return_to = return_to

    def menu(self) -> str:
        """
        –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–∑—ã–≤–∞ (–ø–æ–ª–æ–≤–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –æ—Ç–º–µ–Ω–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å).

        Returns:
            str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        kb = kbs.common.alphabet(self.admin_id)
        if len(kb.buttons[-1]):
            kb.add_row()
        kb.add_text_button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", payload={"button": "save_selected"})
        kb.add_text_button(text="üë• –ü—Ä–∏–∑–≤–∞—Ç—å –≤—Å–µ—Ö", payload={"button": "call_all"})
        kb.add_row()
        kb.add_text_button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", payload={"button": "call"})
        kb.add_row()
        kb.add_text_button(text="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"})

        return kb.get_keyboard()

    def submenu(self, half: int) -> str:
        """
        –ü–æ–¥–º–µ–Ω—é –ø—Ä–∏–∑—ã–≤–∞ (—Å–ø–∏—Å–æ–∫ –±—É–∫–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–æ–ª–æ–≤–∏–Ω—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞).

        Returns:
            str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

        """
        kb = super().submenu(half)
        return kb

    def students(self, letter: str) -> str:
        """
        –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –±—É–∫–≤—É.

        Args:
            letter: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

        Returns:
            str: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

        """
        kb = super().students(letter)
        return kb


class CallNavigator(StudentsNavigator):
    def __init__(self, admin_id: int):
        super().__init__(admin_id)
        self.return_to = "skip_call_message"

    def render(self):
        return CallKeyboards(self.admin_id, self.return_to)


def skip_call_message() -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–∞.

    Returns:
        JSONStr: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    kb = Keyboard()
    kb.add_text_button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", payload={"button": "skip_call_message"})

    kb.add_text_button(text="üö´ –û—Ç–º–µ–Ω–∞", payload={"button": "cancel_call"})
    return kb.get_keyboard()


def list_of_letters(
    letters: list,
    return_to: str = "skip_call_message",
    category_id: int = None,
) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–º–µ–Ω—é —Å –±—É–∫–≤–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞.

    Args:
        letters: —Å–ø–∏—Å–æ–∫ –±—É–∫–≤
        return_to: –ü–µ–π–ª–æ–∞–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Å—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        category_id: –∏–¥—à–Ω–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤
            –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞)

    Returns:
        JSONStr: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()
    for letter in letters:
        if len(kb.buttons[-1]) == 4:
            kb.add_row()
        kb.add_text_button(
            letter,
            payload={
                "button": "letter",
                "value": letter,
                "letters": letters,
            },
        )
    if kb.buttons[-1]:
        kb.add_row()
    payload = {"button": return_to}
    if category_id:
        payload["category"] = category_id
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload=payload)
    return kb.get_keyboard()


def list_of_students(
    letter: str,
    admin_id: int,
    letters: t.Optional[t.List[str]] = None,
) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ñ–∞–º–∏–ª–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ letter.

    Args:
        letter: –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–π
        admin_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        letters: –°–ø–∏—Å–æ–∫ –±—É–∫–≤ (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–¥–º–µ–Ω—é –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –±—É–∫–≤,
            –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥)

    Returns:
        JSONStr: –°—Ç—Ä–æ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    """
    data = db.students.get_list_of_students_by_letter(admin_id, letter)
    selected = db.shortcuts.get_list_of_calling_students(admin_id)
    kb = Keyboard()
    for item in data:
        if len(kb.buttons[-1]) == 2:
            kb.add_row()
        label = " "
        if item.id in selected:
            label = "‚úÖ "
        kb.add_text_button(
            text=f"{label}{item.second_name} {item.first_name}",
            payload={
                "button": "student",
                "student_id": item.id,
                "letter": letter,
                "name": f"{item.second_name} {item.first_name}",
            },
        )
    if kb.buttons[-1]:
        kb.add_row()
    if letters:
        kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "half", "half": letters})
    else:
        kb.add_text_button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "skip_call_message"})
    return kb.get_keyboard()


def call_prompt(admin_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–∏–∑—ã–≤–∞.

    Args:
        admin_id: –∏–¥–µ–Ω—Ç—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Returns:
        JSONStr:  –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = kbs.common.prompt()
    kb.add_row()
    store = db.admin.get_admin_storage(admin_id)
    if store.names_usage:
        names_emoji = "‚úÖ"
    else:
        names_emoji = "üö´"
    chat_emoji = "üì°"
    kb.add_text_button(
        text=f"{names_emoji} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞",
        payload={"button": "names_usage"},
    )
    kb.add_text_button(
        text=f"{chat_emoji} –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —á–∞—Ç",
        payload={"button": "chat_config"},
    )
    return kb.get_keyboard()
