import os
import typing as t

from vkwave.api import API
from vkwave.api.methods._error import APIError
from vkwave.bots import Keyboard
from vkwave.client import AIOHTTPClient

from database import utils as db
from database.models import ChatType
from services.exceptions import BotIsNotAChatAdministrator

JSONStr = str
api_session = API(tokens=os.getenv("VK_TOKEN"), clients=AIOHTTPClient())
api = api_session.get_context()


def preferences() -> JSONStr:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    Returns:
        JSONStr: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()
    kb.add_text_button("üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç—ã", payload={"button": "configure_chats"})
    kb.add_row()
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "main_menu"})

    return kb.get_keyboard()


async def connected_chats(vk_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    Args:
        vk_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Returns:
        JSONStr: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()
    chats = db.chats.get_list_of_chats_by_group(vk_id)
    for chat in chats:
        chat_object = await api.messages.get_conversations_by_id(
            peer_ids=chat.chat_id, group_id=os.getenv("GROUP_ID")
        )
        try:
            chat_title = chat_object.response.items[0].chat_settings.title
        except (AttributeError, IndexError):
            chat_title = "???"
        kb.add_text_button(
            chat_title,
            payload={
                "button": "chat",
                "group": chat.group_id.id,
                "chat_type": chat.chat_type.id,
            },
        )
    if kb.buttons[-1]:
        kb.add_row()
    if len(chats) < 2 and db.chats.get_cached_chats():
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤ –∏–∑ –ë–î –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
        kb.add_text_button("‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", payload={"button": "reg_chat"})
        kb.add_row()
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "settings"})
    return kb.get_keyboard()


def configure_chat(chat_id: int):
    """
    –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞

    Args:
        chat_id: –ò–¥–µ–Ω—Ç—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞

    Returns:
        JSONStr: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()
    kb.add_text_button(
        "üóë –û—Ç–∫–ª—é—á–∏—Ç—å —á–∞—Ç", payload={"button": "remove_chat", "chat": chat_id}
    )
    kb.add_row()
    kb.add_text_button(
        "üóÇ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", payload={"button": "index_chat", "chat": chat_id}
    )
    kb.add_row()
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "configure_chats"})
    return kb.get_keyboard()


def index_chat(
    group_id: int, vk_students: t.List[int], db_students: t.List[int], chat_type: int
) -> JSONStr:
    """
    –ú–µ–Ω—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–∞—Ç–∞

    Args:
        group_id: –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        vk_students: –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —á–∞—Ç–µ
        db_students: –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –ë–î
        chat_type: –¢–∏–ø —á–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ)
    Returns:
        JSONStr: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()
    if vk_students:
        kb.add_text_button(
            "‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            payload={
                "button": "register_students",
                "group": group_id,
                "chat_type": chat_type,
                "students": vk_students,
            },
        )
        kb.add_row()
    if db_students:
        kb.add_text_button(
            "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            payload={
                "button": "purge_students",
                "group": group_id,
                "chat_type": chat_type,
                "students": db_students,
            },
        )
        kb.add_row()
    kb.add_text_button(
        "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        payload={"button": "chat", "group": group_id, "chat_type": chat_type},
    )
    return kb.get_keyboard()


async def cached_chats(user_id: int):
    kb = Keyboard()
    chats = db.chats.get_cached_chats()
    for chat in chats:
        chat_object = await api.messages.get_conversations_by_id(peer_ids=chat.chat_id)
        try:
            chat_members_request = await api.messages.get_conversation_members(
                peer_id=chat.chat_id
            )
        except APIError:
            raise BotIsNotAChatAdministrator(
                "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ"
            )
        chat_members = [
            member.member_id for member in chat_members_request.response.items
        ]
        try:
            chat_title = chat_object.response.items[0].chat_settings.title
        except (IndexError, AttributeError):
            chat_title = "???"
        if len(kb.buttons[-1]) == 2:
            kb.add_row()
        if user_id in chat_members:
            kb.add_text_button(
                chat_title, payload={"button": "select_chat_type", "chat": chat.chat_id}
            )
    if kb.buttons[-1]:
        kb.add_row()
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "configure_chats"})
    return kb.get_keyboard()


def available_chat_types(vk_id: int, chat: int):
    kb = Keyboard()
    chats = db.chats.get_list_of_chats_by_group(vk_id)
    all_chat_types = db.chats.get_chat_types()
    registered_chat_types = [chat.chat_type for chat in chats]

    free_chat_types = [i.id for i in all_chat_types if i not in registered_chat_types]

    group_id = db.admin.get_admin_feud(db.students.get_system_id_of_student(vk_id)).id
    for chat_type in free_chat_types:
        if len(kb.buttons[-1]) == 2:
            kb.add_row()
        obj = ChatType.get(id=chat_type)
        kb.add_text_button(
            obj.description,
            payload={
                "button": "register_chat",
                "chat_type": chat_type,
                "chat": chat,
                "group": group_id,
            },
        )
    if kb.buttons[-1]:
        kb.add_row()
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "reg_chat"})
    return kb.get_keyboard()
