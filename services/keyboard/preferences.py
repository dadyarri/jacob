import os

from vkwave.api import API
from vkwave.bots import Keyboard
from vkwave.client import AIOHTTPClient

from database import utils as db

JSONStr = str
api_session = API(tokens=os.getenv("VK_TOKEN"), clients=AIOHTTPClient())
api = api_session.get_context()


def preferences() -> JSONStr:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    Returns:
        JSONStr: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()
    kb.add_text_button("üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç—ã", payload={"button": "configure_chats"})
    kb.add_row()
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "main_menu"})

    return kb.get_keyboard()


async def connected_chats(vk_id: int) -> JSONStr:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    Args:
        vk_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Returns:
        JSONStr: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()
    chats = db.chats.get_list_of_chats_by_group(vk_id)
    for chat in chats:
        chat_object = await api.messages.get_conversations_by_id(
            peer_ids=chat.chat_id, group_id=os.getenv("GROUP_ID")
        )
        try:
            chat_title = chat_object.response.items[0].chat_settings.title
        except AttributeError:
            chat_title = "???"
        kb.add_text_button(
            chat_title,
            payload={
                "button": "chat",
                "group": chat.group_id.id,
                "chat_type": chat.chat_type.id,
            },
        )
    kb.add_row()
    if len(chats) < 2:
        kb.add_text_button("‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", payload={"button": "reg_chat"})
        kb.add_row()
    kb.add_text_button("‚óÄÔ∏è –ù–∞–∑–∞–¥", payload={"button": "settings"})
    return kb.get_keyboard()
